from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_IDS
from database import Database

# Storage for pending tracking links
link_requests = {}

db = Database()

async def admin_panel(message: types.Message):
    """Show admin panel"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    stats = db.get_stats()
    
    text = (
        "üë®‚Äçüíº **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n"
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {stats['pending_orders']}\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {stats['total_revenue']} ‚ÇΩ\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders"))
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard)

async def admin_orders(callback_query: types.CallbackQuery):
    """Show all orders for admin"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback_query.answer()
    
    orders = db.get_all_orders()
    
    if not orders:
        text = "üìã **–í–°–ï –ó–ê–ö–ê–ó–´**\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìã **–í–°–ï –ó–ê–ö–ê–ó–´**\n\n"
        
        for order in orders[:10]:  # Show last 10 orders
            # order = [id, username, product_name, color, delivery_address, price, status, payment_status, tracking_link, created_at]
            status_emoji = {
                'pending': '‚è≥',
                'processing': 'üîÑ',
                'shipped': 'üöö', 
                'delivered': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(order[6], '‚ùì')
            
            payment_emoji = {
                'pending': '‚è≥',
                'paid': '‚úÖ',
                'failed': '‚ùå'
            }.get(order[7], '‚ùì')
            
            text += f"üÜî **#{order[0]}** - @{order[1]}\n"
            text += f"üì¶ {order[2]} ({order[3]})\n"
            text += f"üí∞ {order[5]} ‚ÇΩ - {status_emoji} {payment_emoji}\n"
            text += f"/manage_{order[0]}\n\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    
    await callback_query.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)

async def admin_stats(callback_query: types.CallbackQuery):
    """Show detailed statistics"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback_query.answer()
    
    stats = db.get_stats()
    
    text = (
        "üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
        f"üì¶ **–ó–ê–ö–ê–ó–´:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['pending_orders']}\n\n"
        f"üí∞ **–§–ò–ù–ê–ù–°–´:**\n"
        f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_revenue']} ‚ÇΩ\n\n"
        f"üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**\n"
        f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}\n"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders"))
    
    await callback_query.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)

async def manage_order(message: types.Message):
    """Manage specific order"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    order_id = message.text.replace('/manage_', '')
    
    order = db.get_order(order_id)
    if not order:
        await message.reply("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # order = [id, username, product_name, color, delivery_address, price, status, payment_status, tracking_link, created_at]
    text = (
        f"üìã **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–ú #{order[0]}**\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{order[1]}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {order[2]} ({order[3]})\n"
        f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
        f"üí∞ –°—É–º–º–∞: {order[5]} ‚ÇΩ\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {order[6]}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {order[7]}\n"
        f"üìÖ –î–∞—Ç–∞: {order[9]}\n"
    )
    
    if order[8]:  # tracking_link
        text += f"üîó –¢—Ä–µ–∫: {order[8]}\n"
    
    keyboard = get_admin_order_keyboard(order_id)
    
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard)

async def confirm_payment(callback_query: types.CallbackQuery):
    """Confirm payment for order"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback_query.answer()
    
    order_id = callback_query.data.replace('confirm_payment_', '')
    db.update_payment_status(order_id, 'paid')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order = db.get_order(order_id)
    if order:
        user_id = db.get_user_id(order[1])
        if user_id:
            try:
                await callback_query.bot.send_message(
                    user_id,
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
                )
            except Exception:
                pass

    await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)

async def reject_payment(callback_query: types.CallbackQuery):
    """Mark payment as failed."""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await callback_query.answer()

    order_id = callback_query.data.replace('reject_payment_', '')
    db.update_payment_status(order_id, 'failed')

    order = db.get_order(order_id)
    if order:
        user_id = db.get_user_id(order[1])
        if user_id:
            try:
                await callback_query.bot.send_message(
                    user_id,
                    f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
            except Exception:
                pass

    await callback_query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)

async def mark_shipped(callback_query: types.CallbackQuery):
    """Mark order as shipped"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback_query.answer()
    
    order_id = callback_query.data.replace('mark_shipped_', '')
    db.update_order_status(order_id, 'shipped')
    
    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π", show_alert=True)

async def mark_delivered(callback_query: types.CallbackQuery):
    """Mark order as delivered"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback_query.answer()
    
    order_id = callback_query.data.replace('mark_delivered_', '')
    db.update_order_status(order_id, 'delivered')
    
    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π", show_alert=True)

async def cancel_order(callback_query: types.CallbackQuery):
    """Cancel order"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback_query.answer()
    
    order_id = callback_query.data.replace('cancel_order_', '')
    db.update_order_status(order_id, 'cancelled')
    
    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)

async def send_link(callback_query: types.CallbackQuery, bot):
    """Request a tracking link from admin and forward it to the customer."""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await callback_query.answer()

    order_id = callback_query.data.replace('send_link_', '')
    link_requests[callback_query.from_user.id] = order_id

    await callback_query.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )

async def process_link_message(message: types.Message, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ç—Ä–µ–∫–∏–Ω–≥-—Å—Å—ã–ª–∫–æ–π."""
    order_id = link_requests.pop(message.from_user.id, None)
    if not order_id:
        return

    order = db.get_order(order_id)
    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user_id = db.get_user_id(order[1])
    if not user_id:
        await message.answer("‚ùå –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        db.add_tracking_link(order_id, message.text)

    try:
        await bot.copy_message(user_id, message.chat.id, message.message_id)
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é")

def get_admin_order_keyboard(order_id):
    """Get keyboard for order management"""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order_id}"),
        InlineKeyboardButton("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞", callback_data=f"reject_payment_{order_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data=f"mark_shipped_{order_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"mark_delivered_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"send_link_{order_id}")
    )
    return keyboard

